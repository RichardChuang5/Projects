
import websockets
import json
import asyncio
import time
from kafka import KafkaProducer

#this is the way we extract information. on message is the type of information we need to extract and on close is what things need to be executed when the link is closed.
#This information is also taken directly from https://pypi.org/project/websocket-client/

cc1 = 'btcusd'
cc2 = 'ethusd'
cc3 = 'dogeusd'
interval = '1m'
socket = f'wss://stream.binance.com:9443/ws/{cc1}t@kline_{interval}/{cc2}t@kline_{interval}/{cc3}t@kline_{interval}'

# To point to the producer that currently sits within our local computer
producer = KafkaProducer(bootstrap_servers=['localhost:9092'])

# Use producer.flush() below because Kafka tries and batch messages. Using flush, it immediately gets pushed through.
producer.flush()

# The function below will connect to Binance via a websocket, and print the statements on the screen. Additionally, we employ Apache Kafka here on our local system
# which requires that we set up Zookeeper, the server, producer, and consumer. We will use this in later stages to export the data to our chosen database.

async def on_message():
    async with websockets.connect(socket) as crypto_stream:
        while True:
            json_message = json.loads(await crypto_stream.recv())
            candle = json_message['k']
            close, high, low, vol = candle['c'], candle['h'], candle['l'], candle['v']
            message = (f'TS:{time.time()}', candle['s'], f'Close: {close}', f' High: {high}', f' Low: {low}', f' Vol: {vol}')
            print(message)
            producer.send('first_topic', json.dumps(message).encode('utf-8'))

if __name__=='__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_message())
