<mxfile host="app.diagrams.net" modified="2021-11-17T19:45:09.511Z" agent="5.0 (Windows)" etag="twVp0k-JBs5js8fW-8r-" version="15.6.8" type="github">
  <diagram id="5AFDKeI0XAiyJQLm4VW2" name="Page-1">
    <mxGraphModel dx="2062" dy="780" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-4" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-1" target="V2IVUwF2Q-XYG3cvJmeJ-3">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-1" value="Binance US Data" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="20" y="290" width="110" height="60" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-8" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;fontSize=12;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-3" target="V2IVUwF2Q-XYG3cvJmeJ-6">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-3" value="Filter JSON Message" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;" vertex="1" parent="1">
          <mxGeometry x="170" y="290" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-5" value="&lt;font style=&quot;font-size: 18px ; line-height: 1.2&quot;&gt;AWS EC2&lt;/font&gt;" style="whiteSpace=wrap;html=1;aspect=fixed;dashed=1;fillColor=none;imageVerticalAlign=top;spacingBottom=150;" vertex="1" parent="1">
          <mxGeometry x="330" y="190" width="210" height="210" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0;exitY=0.5;exitDx=0;exitDy=0;fontSize=12;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-6" target="V2IVUwF2Q-XYG3cvJmeJ-10">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-14" value="Store historical data" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.5;exitY=1;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;fontSize=12;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-6" target="V2IVUwF2Q-XYG3cvJmeJ-12">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-6" value="&lt;font style=&quot;font-size: 12px&quot;&gt;AWS MSK&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=18;fillColor=default;rotation=-90;" vertex="1" parent="1">
          <mxGeometry x="375" y="290" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-13" value="Store data related to executed trades" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;exitX=1;exitY=0.5;exitDx=0;exitDy=0;fontSize=12;html=1;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-10" target="V2IVUwF2Q-XYG3cvJmeJ-12">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-10" value="Execute trading methodology" style="shape=process;whiteSpace=wrap;html=1;backgroundOutline=1;fontSize=12;fillColor=default;" vertex="1" parent="1">
          <mxGeometry x="375" y="460" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-12" value="AWS DynamoDB" style="shape=cylinder3;whiteSpace=wrap;html=1;boundedLbl=1;backgroundOutline=1;size=15;fontSize=12;fillColor=default;" vertex="1" parent="1">
          <mxGeometry x="740" y="445" width="80" height="90" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-15" value="AWS Deployment Architecture" style="rounded=0;whiteSpace=wrap;html=1;fontSize=24;fillColor=none;strokeColor=none;" vertex="1" parent="1">
          <mxGeometry x="230" y="40" width="410" height="60" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-16" value="&lt;div align=&quot;left&quot;&gt;Rationale:&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;1. Collect data from our Binance US wallet. This information includes, but is not limited to, volume, opening, closing, highest, and lowest prices. The messages are received in JSON format and will need to be parsed in order to take only the data that is necessary.&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;2. We want to use AWS Managed Streaming for Kafka (MSK) in order to consume/produce our filtered JSON messages. To do so, we need to set up a virtual machine using AWS Elastic Compute (EC2) which is a virtual machine set up on a Linux based system. From here, we can SSH into our virtual environment and place our Python script inside our virtual machine. This will allow our script to be run from our EC2 environment and will sync with MSK connected to it. &lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;3. Initial messages are formatted from our JSON message and and produced via MSK. These messages are then consumed and stored in our DynamoDB, NoSQL database.&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;font-size: 12px&quot; align=&quot;left&quot;&gt;4. To execute a trade, our script reads the wallet size and other crypto assets we possess to create a trade based on a % of our portfolio and free cash. Once a trade has been executed, the details of these trades are sent into the DynamoDB database.&lt;br&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;fontSize=24;fillColor=none;strokeColor=none;align=left;spacingBottom=100;" vertex="1" parent="1">
          <mxGeometry x="25" y="680" width="800" height="220" as="geometry" />
        </mxCell>
        <mxCell id="V2IVUwF2Q-XYG3cvJmeJ-17" value="" style="endArrow=classic;startArrow=classic;html=1;rounded=0;fontSize=12;entryX=0.5;entryY=1;entryDx=0;entryDy=0;exitX=0;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="V2IVUwF2Q-XYG3cvJmeJ-10" target="V2IVUwF2Q-XYG3cvJmeJ-1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="370" y="495" as="sourcePoint" />
            <mxPoint x="70" y="495" as="targetPoint" />
            <Array as="points">
              <mxPoint x="75" y="490" />
            </Array>
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
